#include <stdio.h>
#include <stdlib.h>

#define MAX_EDGES 100
#define MAX_VERTICES 100

typedef struct {
    int u, v, weight;
} Edge;

typedef struct {
    Edge edges[MAX_EDGES];
    int n;
} Graph;

int parent[MAX_VERTICES];
int rank_arr[MAX_VERTICES];

int find(int x) {
    if (parent[x] != x)
        parent[x] = find(parent[x]);
    return parent[x];
}

void union_set(int x, int y) {
    int xroot = find(x);
    int yroot = find(y);

    if (xroot == yroot)
        return;

    if (rank_arr[xroot] < rank_arr[yroot]) {
        parent[xroot] = yroot;
    } else if (rank_arr[xroot] > rank_arr[yroot]) {
        parent[yroot] = xroot;
    } else {
        parent[yroot] = xroot;
        rank_arr[xroot]++;
    }
}

int compare(const void *a, const void *b) {
    Edge *e1 = (Edge *)a;
    Edge *e2 = (Edge *)b;
    return e1->weight - e2->weight;
}

void kruskal(Graph *g, int vertices) {
    for (int i = 0; i < vertices; i++) {
        parent[i] = i;
        rank_arr[i] = 0;
    }

    qsort(g->edges, g->n, sizeof(Edge), compare);

    int mst_weight = 0;
    printf("Edges in the Minimum Spanning Tree:\n");
    for (int i = 0; i < g->n; i++) {
        int u = g->edges[i].u;
        int v = g->edges[i].v;

        if (find(u) != find(v)) {
            printf("%d -- %d == %d\n", u, v, g->edges[i].weight);
            mst_weight += g->edges[i].weight;
            union_set(u, v);
        }
    }
    printf("Total weight of MST: %d\n", mst_weight);
}

int main() {
    Graph g;
    int vertices, edges;

    printf("Enter number of vertices: ");
    scanf("%d", &vertices);
    printf("Enter number of edges: ");
    scanf("%d", &edges);

    g.n = edges;
    printf("Enter edges (u v weight):\n");
    for (int i = 0; i < edges; i++) {
        scanf("%d %d %d", &g.edges[i].u, &g.edges[i].v, &g.edges[i].weight);
    }

    kruskal(&g, vertices);

    return 0;
}
