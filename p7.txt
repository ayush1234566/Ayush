#include <stdio.h>

#define MAX 100

void sort(int n, float ratio[], int weight[], int profit[]) {
    int i, j, tempw, tempp;
    float tempr;
    for (i = 0; i < n - 1; i++)
        for (j = i + 1; j < n; j++)
            if (ratio[i] < ratio[j]) {
                tempr = ratio[i]; ratio[i] = ratio[j]; ratio[j] = tempr;
                tempw = weight[i]; weight[i] = weight[j]; weight[j] = tempw;
                tempp = profit[i]; profit[i] = profit[j]; profit[j] = tempp;
            }
}

void fractionalKnapsack(int n, int weight[], int profit[], int capacity) {
    float ratio[MAX], totalProfit = 0.0;
    int i, currWeight = 0;
    for (i = 0; i < n; i++)
        ratio[i] = (float)profit[i] / weight[i];
    sort(n, ratio, weight, profit);
    for (i = 0; i < n; i++) {
        if (currWeight + weight[i] <= capacity) {
            currWeight += weight[i];
            totalProfit += profit[i];
        } else {
            int remain = capacity - currWeight;
            totalProfit += ratio[i] * remain;
            break;
        }
    }
    printf("Maximum profit (Fractional): %.2f\n", totalProfit);
}

void zeroOneKnapsack(int n, int weight[], int profit[], int capacity) {
    float ratio[MAX];
    int i, currWeight = 0, totalProfit = 0;
    for (i = 0; i < n; i++)
        ratio[i] = (float)profit[i] / weight[i];
    sort(n, ratio, weight, profit);
    for (i = 0; i < n; i++) {
        if (currWeight + weight[i] <= capacity) {
            currWeight += weight[i];
            totalProfit += profit[i];
        }
    }
    printf("Approximate profit (0/1 Greedy): %d\n", totalProfit);
}

int main() {
    int n, weight[MAX], profit[MAX], capacity, i;

    printf("Enter number of items: ");
    scanf("%d", &n);

    printf("Enter weights of items:\n");
    for (i = 0; i < n; i++)
        scanf("%d", &weight[i]);

    printf("Enter profits of items:\n");
    for (i = 0; i < n; i++)
        scanf("%d", &profit[i]);

    printf("Enter capacity of knapsack: ");
    scanf("%d", &capacity);

    zeroOneKnapsack(n, weight, profit, capacity);
    fractionalKnapsack(n, weight, profit, capacity);

    return 0;
}
